#! /bin/env python
#! /usr/bin/env python2.7

###
# main wrapper will take cmdline input and run programs
###
import os
from SEAseqLib.mainLibrary import *

#coloring constants:
color = True
if color:bs = "\033[1m";be = "\033[0;0m";PURPLE = '\033[95m';BLUE = '\033[94m';GREEN = '\033[92m';YELLOW = '\033[93m';RED = '\033[91m';ENDC = '\033[0m';BLACK = '\33['+'0;30'+'m';CYAN = '\33['+'0;36'+'m';GRAY = '\33['+'0;37'+'m';BBLUE = '\33['+'1;34'+'m';BRED = '\33['+'1;31'+'m';BGREEN = '\33['+'1;32'+'m';BCYAN = '\33['+'1;36'+'m';BPURPLE = '\33['+'1;35'+'m';BYELLOW = '\33['+'1;33'+'m';DGRAY = '\33['+'1;30'+'m'
else:bs = '';be = '';HEADER = '';BLUE = '';GREEN = '';YELLOW = '';RED = '';ENDC = '';PURPLE='';BLACK='';CYAN='';GRAY='';BBLUE='';BRED='';BGREEN='';BCYAN='';BPURPLE='';BYELLOW='';DGRAY='';

def main():
    import sys
    try: cmd = sys.argv[1]
    except IndexError:
	sys.stderr.write('Please specify a command, if you need help run SEAseq help.\n')
	cmd = None

    if cmd and cmd not in ['Help','help','-help','--help','-h']: indata = getindata(cmd)
    elif not cmd: return 1
    else:	sys.stdout.write(
				    '\nProgram: SEAseq\n'
				    +'Version: '+version+'\n'
				    +'For analysis of SEAseq data.\n\n'
				    +'Usage:\tSEAseq <command> -path <analysis folder> [options]\n\n'
				    +'Commands:\n'
				    +'\tinit'		+' '.join(['' for i in range(20-len('init'))])			+'Initiate a new anlysis\n'
				    +'\taddfqs'		+' '.join(['' for i in range(20-len('addfqs'))])		+'Add fastq files to be analysed\n'
				    +'\tclusterbarcodes'+' '.join(['' for i in range(20-len('clusterbarcodes'))])	+'cluster reads according to barcode sequence\n'
				    +'\tsortreads'	+' '.join(['' for i in range(20-len('sortreads'))])		+'links barcode cluster information to each read pair\n'
				    +'\tmeta'		+' '.join(['' for i in range(20-len('meta'))])			+'metagenomics amplicon analysis, EXPRIMENTAL!\n'
				    +'\tsbatch'		+' '.join(['' for i in range(20-len('sbatch'))])		+'creates and queues sbatch files for the clusterbarcodes, sortreads and meta steps\n'
				    +'\tmetagraph'	+' '.join(['' for i in range(20-len('metagraph'))])		+'generates pdf graphs from meta stats\n'
				    +'\tclassifymeta'	+' '.join(['' for i in range(20-len('classifymeta'))])		+'classify the consensussequences from the meta clusters\n'
				    +'\thelp'		+' '.join(['' for i in range(20-len('help'))])			+'print this help message and exit\n'
				    )

    if cmd == 'init':
	from SEAseqLib.init import init
	init(indata)
    elif cmd == 'addfqs':
	from SEAseqLib.addfqs import addfqs
	addfqs(indata)
    elif cmd == 'clusterbarcodes':
	from SEAseqLib.clusterbarcodes import clusterbarcodes
	clusterbarcodes(indata)
    elif cmd == 'sortreads':
	from SEAseqLib.sortreads import sortreads
	sortreads(indata)
    elif cmd == 'meta':
	from SEAseqLib.consensusmeta import meta
	meta(indata)
    elif cmd == 'sbatch':
	from SEAseqLib.sbatch import sbatch
	sbatch(indata)
    elif cmd == 'metagraph':
	from SEAseqLib.metagraph import metagraph
	metagraph(indata)
    elif cmd == 'classifymeta':
	from SEAseqLib.classifymeta import classifymeta
	classifymeta(indata)
    elif cmd[0] in ['H','h']:		pass
    elif cmd == None:			pass
    else: sys.stderr.write('Invalid command. Please specify a command, if you need help run SEAseq help.\n')

def getindata(cmd):
    import argparse
    argparser = argparse.ArgumentParser(description='Analysis of SEAseq data.', formatter_class=argparse.RawTextHelpFormatter)
    argparser.add_argument('cmd')
    argparser.add_argument('--debug',	dest='debug', 	action='store_true', 			required=False,	default=False,	help='Debug (run as regular single process python script).')
    argparser.add_argument('-path',	dest='path',	metavar='<path>',	type=str,	required=True,	default=False,	help='Set the analysis path.')
    argparser.add_argument('--src',	dest='skipreadcounting', 	action='store_true', 			required=False,	default=False,	help='Skip read counting (for speeding up debug runs, sets readcount to 30M/infile).')
    if cmd == 'init': pass
    if cmd == 'sbatch':
	argparser.add_argument('-jobname',	dest='jobname',	metavar='NAME',			type=str,	required=False,	default='',	help='Name be able to identify sample, only 11first char will be visible for jobinfo (default "")')
	argparser.add_argument('--send',	dest='send', 	action='store_true', 			required=False,	default=False,	help='Send sbatch scripts to job-queue.')
	argparser.add_argument('--sendonly',	dest='sendonly',action='store_true', 			required=False,	default=False,	help='Do not generate the files only Send sbatch scripts to job-queue.')
	argparser.add_argument('--small',	dest='small', 	action='store_true', 			required=False,	default=False,	help='make for smaller dataset job-queue.')
    if cmd == 'addfqs':
	argparser.add_argument(	'-r1',			dest='reads1',	metavar='FILE',				type=file,	required=True, 			help='Indata "fastq"-file read1.')
	argparser.add_argument(	'-r2',			dest='reads2',	metavar='FILE',				type=file,	required=True,	default=None,	help='Indata "fastq"-file read2.')
    if cmd == 'clusterbarcodes' or cmd == 'sbatch':
	argparser.add_argument(	'-bm',			dest='bcmm',	metavar='N',				type=int,	required=False,	default=0,	help='Number off missmatches allowed in barcode sequence during clustering (default 0)')
	argparser.add_argument(	'-hm',			dest='handlemm',metavar='N',				type=int,	required=False,	default=0,	help='Number off missmatches allowed in handle sequence (default 0)')
        argparser.add_argument(	'-seed',		dest='seed',	metavar='N',				type=int,	required=False,	default=100,	help='Number of top barcodes (with most reads) to use as seeds in clustering(default 100)')
    if cmd == 'sortreads' or cmd == 'sbatch':
        argparser.add_argument(	'-sortfmt',		dest='sortfmt',	metavar='[fa/fq]',			type=str,	required=False,	default='fq',	help='Format to output reads to fa=fasta or fq=fastq(default fastq)')
    if cmd == 'sortreads' or cmd == 'clusterbarcodes' or cmd == 'meta':
	argparser.add_argument(	'-p',			dest='cpus',	metavar='N',				type=int,	required=False,	default=1,	help='The number of processes to run in parallel (default 1).')
	argparser.add_argument(	'-skip',		dest='skip',	metavar='N',				type=int,	required=False,	default=0,	help='Skip the first N read pairs in files (default 0).')
	argparser.add_argument(	'-stop',		dest='stop',	metavar='N',				type=int,	required=False,	default=0,	help='Stop after N read pairs, set to 0 to disable (default 0).')
	argparser.add_argument(	'-random',		dest='n',	metavar='N',				type=int,	required=False,	default=0,	help='Use a random subset of N read pairs, this option is slower (default 0 = off). Can not be used in combination with "-skip" or "-stop"')
        argparser.add_argument(	'-mrc',			dest='mrc',	metavar='N',				type=int,	required=False,	default=1,	help='Minimum number of reads per cluster to consider it (default 1) DISABLED')
	argparser.add_argument(	'-trimr1',		dest='trimr1',	metavar='N',				type=int,	required=False,	default=0,	help='Number of bases to trim from 3prime end of r1 (default 0)')
	argparser.add_argument(	'-trimr2',		dest='trimr2',	metavar='N',				type=int,	required=False,	default=0,	help='Number of bases to trim from 3prime end of r2 (default 0)')
    if cmd == 'meta' or cmd == 'sbatch':
	argparser.add_argument(	'-mr',			dest='minimum_reads',	metavar='N',				type=int,	required=False,	default=5,	help='minimum number of reads supporting a consensus sequence (default 5).')
	argparser.add_argument(	'-ms',			dest='minimum_support',	metavar='N',				type=float,	required=False,	default=5.0,	help='minimum percentage of read population supporting a consensus sequence  (default 5).')
	argparser.add_argument(	'-mi',			dest='clustering_identity',	metavar='N',				type=float,	required=False,	default=97.0,	help='Minimum identity for two sequences to cluster together (default 97).')
    if cmd == 'classifymeta' or cmd == 'sbatch':
	argparser.add_argument(	'-db',			dest='database',	metavar='FILE',			type=str,	required=False,	default='/bubo/proj/b2011011/SEAseq/reference/NCBI_CONCAT/all.fa',	help='database for the BLAST search (default /bubo/proj/b2011011/SEAseq/reference/NCBI_CONCAT/all.fa)')
	argparser.add_argument(	'-gidb',		dest='gidatabase',	metavar='FILE',			type=str,	required=False,	default='/bubo/proj/b2011011/SEAseq/reference/NCBI_CONCAT/all.gi2organism.db',	help='database for gi number to organism name conversion (None = fetch online from ncbi)')
	argparser.add_argument(	'-identity',		dest='identity',	metavar='N',			type=float,	required=False,	default=97.0,	help='Identity cutoff for BLAST hits (default 97 percent).')
	argparser.add_argument(	'-length',		dest='length',		metavar='N',			type=float,	required=False,	default=95.0,	help='Alignment length cutoff for BLAST hits (default 95 percent).')
    if cmd == 'metagraph':
	argparser.add_argument(	'-step',		dest='step',	metavar='N',				type=int,	required=False,	default=0,	help='Update intervall. Updates y value every "step" x value (default "max(x)/200" ie 200 datapoints along x-axis)')
	argparser.add_argument(	'-x',			dest='xscale',	metavar='N-N',				type=str,	required=False,	default='0-1000',help='x axis scale (default 0-1000)')
	argparser.add_argument(	'-y',			dest='yscale',	metavar='N-N',				type=str,	required=False,	default='0-1000',help='y axis scale (default 0-1000)')
	argparser.add_argument(	'-sample',		dest='sample',	metavar='str',				type=str,	required=False,	default='0-1000',help='Sample name to put in header and filename')
	argparser.add_argument('--highres',	dest='highres', 	action='store_true', 			required=False,	default=False,	help='Use all x points to get high res data.')
	argparser.add_argument(	'-g',			dest='graphs',	metavar='N',				type=str,	required=False,	default='a',	help='"all" or str with graph signs (default a).\n\n'+
				'Available graph signs:\n\n'+
				'a --> x  = "Minimum number of read pairs per cluster"\n'+
				'      y1-5  = "Number of barcode cluster" for Total, 16S, ITS, BOTH and None clusters\n'+
				'      y6-10 = "Percentage monoclonality"  for 16S, ITS and BOTH clusters\n'+
				'      Makes one graph for "good pairs" and one for "total read pairs" per cluster.\n\n'+
				'b --> x  = "Minimum number of read pairs per cluster"\n'+
				'      y1 = "Number of barcode cluster with consensus sequences of TYPE, total readpairs"\n'+
				'      y2 = "Percentage barcode clusters monoclonal for TYPE, total readpairs"\n'+
				'      y3 = "Number of barcode cluster with consensus sequences of TYPE, good readpairs"\n'+
				'      y4 = "Percentage barcode clusters monoclonal for TYPE, good readpairs"\n'+
				'      Makes one graph each for TYPE = ITS, 16S and BOTH.\n\n'+
				'c --> x  = "Minimum number of read pairs per cluster"\n'+
				'      y1-2 = "Number of barcode cluster" for Total and (16S, ITS or BOTH) clusters\n'+
				'      y3   = "Percentage monoclonality" percentage of clusters where there are only one version (/sequence) of the defined amplicon(s)\n'+
				'      Makes one graph for "good pairs" and one for "total read pairs" per cluster.\n\n'
			       )
	


    import sys
    indata = argparser.parse_args(sys.argv[1:])
    if indata.path[-1] == '/': indata.path=indata.path[:-1]

    return indata

#####
#check if run or imported // call main() or not
#####
if __name__ == "__main__":
    main()
#END of script
