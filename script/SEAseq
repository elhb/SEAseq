#! /bin/env python
#! /usr/bin/env python2.7

###
# main wrapper will take cmdline input and run programs
###
import os
from SEAseqLib.mainLibrary import *

#coloring constants:
color = True
if color:bs = "\033[1m";be = "\033[0;0m";PURPLE = '\033[95m';BLUE = '\033[94m';GREEN = '\033[92m';YELLOW = '\033[93m';RED = '\033[91m';ENDC = '\033[0m';BLACK = '\33['+'0;30'+'m';CYAN = '\33['+'0;36'+'m';GRAY = '\33['+'0;37'+'m';BBLUE = '\33['+'1;34'+'m';BRED = '\33['+'1;31'+'m';BGREEN = '\33['+'1;32'+'m';BCYAN = '\33['+'1;36'+'m';BPURPLE = '\33['+'1;35'+'m';BYELLOW = '\33['+'1;33'+'m';DGRAY = '\33['+'1;30'+'m'
else:bs = '';be = '';HEADER = '';BLUE = '';GREEN = '';YELLOW = '';RED = '';ENDC = '';PURPLE='';BLACK='';CYAN='';GRAY='';BBLUE='';BRED='';BGREEN='';BCYAN='';BPURPLE='';BYELLOW='';DGRAY='';

def main():
    import sys
    try: cmd = sys.argv[1]
    except IndexError:
	sys.stderr.write('Please specify a command, if you need help run SEAseq help.\n')
	cmd = None

    if cmd not in ['compare','clone','Help','help','-help','--help','-h','init','addfqs','clusterbarcodes','sortreads','meta','sbatch','makegraphs','classifymeta','setVariables']:sys.stderr.write('Invalid command. Please specify a command, if you need help run SEAseq help.\n');sys.exit()

    if cmd and cmd not in ['Help','help','-help','--help','-h']: indata = getindata(cmd)
    elif not cmd: return 1
    else:	sys.stdout.write(
				    '\nProgram: SEAseq\n'
				    +'Version: '+version+'\n'
				    +'For analysis of SEAseq data.\n\n'
				    +'Usage:\tSEAseq <command> -path <analysis folder> [options]\n\n'
				    +'Commands:\n'
				    +'\tinit'		+' '.join(['' for i in range(20-len('init'))])			+'Initiate a new anlysis\n'
				    +'\tclone'		+' '.join(['' for i in range(20-len('clone'))])			+'Clone some parts of other analysis to save cpu power and space\n'
				    +'\tcompare'	+' '.join(['' for i in range(20-len('compare'))])		+"compare stuff because it's fun\n"
				    +'\tsetVariables'	+' '.join(['' for i in range(20-len('setVariables'))])		+'Set non default values to variables\n'
				    +'\taddfqs'		+' '.join(['' for i in range(20-len('addfqs'))])		+'Add fastq files to be analysed\n'
				    +'\tclusterbarcodes'+' '.join(['' for i in range(20-len('clusterbarcodes'))])	+'cluster reads according to barcode sequence\n'
				    +'\tsortreads'	+' '.join(['' for i in range(20-len('sortreads'))])		+'links barcode cluster information to each read pair\n'
				    +'\tmeta'		+' '.join(['' for i in range(20-len('meta'))])			+'metagenomics amplicon analysis, EXPRIMENTAL!\n'
				    +'\tsbatch'		+' '.join(['' for i in range(20-len('sbatch'))])		+'creates and queues sbatch files for the clusterbarcodes, sortreads and meta steps\n'
				    +'\tmakegraphs'	+' '.join(['' for i in range(20-len('makegraphs'))])		+'generates pdf graphs from meta stats\n'
				    +'\tclassifymeta'	+' '.join(['' for i in range(20-len('classifymeta'))])		+'classify the consensussequences from the meta clusters\n'
				    +'\thelp'		+' '.join(['' for i in range(20-len('help'))])			+'print this help message and exit\n'
				    )

    if cmd == 'init':
	from SEAseqLib.init import init
	init(indata)
    elif cmd == 'compare':
	from SEAseqLib.compare import compare
	compare(indata)
    elif cmd == 'clone':
	from SEAseqLib.clone import clone
	clone(indata)
    elif cmd == 'setVariables':
	from SEAseqLib.setVariables import setVariables
	setVariables(indata)
    elif cmd == 'addfqs':
	from SEAseqLib.addfqs import addfqs
	addfqs(indata)
    elif cmd == 'clusterbarcodes':
	from SEAseqLib.clusterbarcodes import clusterbarcodes
	clusterbarcodes(indata)
    elif cmd == 'sortreads':
	from SEAseqLib.sortreads import sortreads
	sortreads(indata)
    elif cmd == 'meta':
	from SEAseqLib.consensusmeta import meta
	meta(indata)
    elif cmd == 'sbatch':
	from SEAseqLib.sbatch import sbatch
	sbatch(indata)
    elif cmd == 'makegraphs':
	from SEAseqLib.makegraphs import makegraphs
	makegraphs(indata)
    elif cmd == 'classifymeta':
	from SEAseqLib.classifymeta import classifymeta
	classifymeta(indata)
    elif cmd[0] in ['H','h']:		pass
    elif cmd == None:			pass
    else: sys.stderr.write('Invalid command. Please specify a command, if you need help run SEAseq help.\n')

def getindata(cmd):
    import argparse
    argparser = argparse.ArgumentParser(description='Analysis of SEAseq data.', formatter_class=argparse.RawTextHelpFormatter)

    # All programs
    argparser.add_argument('cmd')
    argparser.add_argument('--debug',						dest='debug', 				action='store_true', 			required=False,	default=False,	help='Debug (run as regular single process python script).')
    argparser.add_argument('-path',						dest='path',				metavar='<path>',	type=str,	required=True,	default=False,	help='Set the analysis path.')
    argparser.add_argument('-tmp','-tempFileFolder',				dest='tempFileFolder',			metavar='<path>',	type=str,	required=False,	default=False,	help='path to folder where temporary files should be written to (default False). Now forced to $SNIC_TMP if on a "*.uppmax.uu.se"-host ')
    
    if cmd == 'compare':
	pass
    if cmd == 'clone':
	argparser.add_argument('-clonePath',					dest='clonePath',			metavar='<path>',	type=str,	required=True,	default=False,	help='path to clone from.')
	argparser.add_argument('--clusterAndSort',				dest='cloneClusterAndSort', 		action='store_true', 			required=False,	default=False,	help='clone cluster and sort steps (default False).')
	argparser.add_argument('--meta',					dest='cloneMeta', 			action='store_true', 			required=False,	default=False,	help='clone cluster sort and meta steps (default False).')
    if cmd == 'setVariables':
	argparser.add_argument('--subSpecies',					dest='subSpecies', 			action='store_true', 			required=False,	default=False,	help='Show subspecies information or not (default False).')
	argparser.add_argument('-j','-jobName',					dest='jobName',				metavar='<name>',	type=str,	required=False,	default='',	help='Name be able to identify sample, only 11first char will be visible for jobinfo (default "")')
        argparser.add_argument('--src','--skipReadCounting',			dest='skipReadCounting', 		action='store_true', 			required=False,	default=False,	help='Skip read counting (for speeding up debug runs, sets readcount to 30M/infile).')
	argparser.add_argument(	'-bm','-maxBeadBarcodeMissMatch',		dest='maxBeadBarcodeMissMatch',		metavar='N',		type=int,	required=False,	default=0,	help='Number off missmatches allowed in barcode sequence during clustering (default 0)')
	argparser.add_argument(	'-hm','-maxHandleMissMatch',			dest='maxHandleMissMatch',		metavar='<int>',	type=int,	required=False,	default=0,	help='Number off missmatches allowed in handle sequence (default 0)')
        argparser.add_argument(	'-seed','-numberOfClusterSeeds',		dest='numberOfClusterSeeds',		metavar='<int>',	type=int,	required=False,	default=100,	help='Number of top barcodes (with most reads) to use as seeds in clustering(default 100)')
	argparser.add_argument(	'-hpos','-handlePosition',			dest='handlePosition',			metavar='<start>:<end>',type=str,	required=False,	default=False,	help='Define handle by position instead of sequence (default False)')
        argparser.add_argument(	'-sortFormat',					dest='sortFormat',			metavar='[fa/fq]',	type=str,	required=False,	default='fq',	help='Format to output reads to fa=fasta or fq=fastq(default fastq)')
	argparser.add_argument(	'-trimr1',					dest='trimmingRead1',			metavar='<int>',	type=int,	required=False,	default=0,	help='Number of bases to trim from 3prime end of r1 (default 0)')
	argparser.add_argument(	'-trimr2',					dest='trimmingRead2',			metavar='<int>',	type=int,	required=False,	default=0,	help='Number of bases to trim from 3prime end of r2 (default 0)')
	argparser.add_argument(	'-primerset',					dest='primerset',			metavar='<FILE>',	type=str,	required=False, default='primersets/meta2.primerset',	help='Primer set file (default ="primersets/meta2.primerset").')
	argparser.add_argument(	'-mr','-minReadCountPerConsensus',		dest='minReadCountPerConsensus',	metavar='<int>',	type=int,	required=False,	default=2,	help='minimum number of reads supporting a consensus sequence (default 2).')
	argparser.add_argument(	'-ms','-minReadPopSupportConsensus',		dest='minReadPopSupportConsensus',	metavar='<int>',	type=float,	required=False,	default=0.0,	help='minimum percentage of read population supporting a consensus sequence  (default 1).')
	argparser.add_argument(	'-mi','-minConsensusClusteringIdentity',	dest='minConsensusClusteringIdentity',	metavar='<int>',	type=float,	required=False,	default=97.0,	help='Minimum identity for two sequences to cluster together (default 97).')
	argparser.add_argument(	'-aalv','-allowedAllelLevelVariation',		dest='allowedAllelLevelVariation',	metavar='<fraction>',	type=float,	required=False,	default=1.0,	help='The allowed variation of allele readcount levels, eg. if the most represented allele has 100 reads then the second most represented most have "readcount >= (1-fraction)*mostRepresentedReadCount" (default 1.0).')
	argparser.add_argument(	'-db','-blastDb',				dest='blastDb',				metavar='<FILE>',	type=str,	required=False,	default='/proj/b2011011/SEAseq/reference/NCBI_CONCAT/all.fa',	help='database for the BLAST search (default /proj/b2011011/SEAseq/reference/NCBI_CONCAT/all.fa)')
	argparser.add_argument(	'-gidb','-gidatabase',				dest='gidatabase',			metavar='<FILE>',	type=str,	required=False,	default='/proj/b2011011/SEAseq/reference/NCBI_CONCAT/all.gi2organism.db',	help='database for gi number to organism name conversion (None = fetch online from ncbi)')
	argparser.add_argument(	'-id','-minBlastIdentity',			dest='minBlastIdentity',		metavar='<int>',	type=float,	required=False,	default=99.0,	help='Identity cutoff for BLAST hits (default 97 percent).')
	argparser.add_argument(	'-rdp','-rdpConfidence',			dest='rdpConfidence',			metavar='<float>',	type=float,	required=False,	default=80.0,	help='RDP classification confidence cutoff, should never go below 50 (default 80 percent).')
	argparser.add_argument(	'-alenc','-minBlastCoverage',			dest='minBlastCoverage',		metavar='<int>',	type=float,	required=False,	default=95.0,	help='Alignment length cutoff for BLAST hits (default 95 percent).')
	argparser.add_argument(	'-mcs','-mostCommonToShow',			dest='mostCommonToShow',		metavar='<int>',	type=int,	required=False,	default=10,	help='The number of most common BLast hits to show in the end of summary (default 10).')
	argparser.add_argument('--skipPrevotella',				dest='skipPrevotella', 			action='store_true', 			required=False,	default=False,	help='Skip all Prevotella hits (default False).')
	argparser.add_argument(	'-rl','-readLength',				dest='readLength',			metavar='<int>',	type=int,	required=False,	default=None,	help='Read length limit (longer will be trimmed, default None).')

    if cmd == 'sbatch':
	argparser.add_argument(	'-prj','-project',dest='project',metavar='<b20xxxxx>',	type=str,	required=False,	default='b2014005',	help='uppmaxproject (default b2011011)')
	argparser.add_argument('--send',	dest='send', 	action='store_true', 			required=False,	default=False,	help='Send sbatch scripts to job-queue.')
	argparser.add_argument('--sendonly',	dest='sendonly',action='store_true', 			required=False,	default=False,	help='Do not generate the files only Send sbatch scripts to job-queue.')
	argparser.add_argument('--small',	dest='small', 	action='store_true', 			required=False,	default=False,	help='make for smaller dataset job-queue.')
	argparser.add_argument('--skipCluster',	dest='skipCluster',action='store_true', 		required=False,	default=False,	help='Skip this sbatch file (default False).')
	argparser.add_argument('--skipSort',	dest='skipSort',action='store_true', 		required=False,	default=False,	help='Skip this sbatch file (default False).')
	argparser.add_argument('--skipMeta',	dest='skipMeta',action='store_true', 		required=False,	default=False,	help='Skip this sbatch file (default False).')
	argparser.add_argument('--skipClassify',dest='skipClassify',action='store_true', 		required=False,	default=False,	help='Skip this sbatch file (default False).')

    if cmd == 'addfqs':
	argparser.add_argument(	'-r1',			dest='reads1',	metavar='FILE',				type=file,	required=True, 			help='Indata "fastq"-file read1.')
	argparser.add_argument(	'-r2',			dest='reads2',	metavar='FILE',				type=file,	required=True,	default=None,	help='Indata "fastq"-file read2.')
    
    if cmd == 'sortreads' or cmd == 'clusterbarcodes' or cmd == 'meta' or cmd == 'classifymeta' or cmd == 'sbatch':
	argparser.add_argument(	'-p',			dest='cpus',	metavar='N',				type=int,	required=False,	default=1,	help='The number of processes to run in parallel (default 1).')
    
    if cmd == 'sortreads' or cmd == 'clusterbarcodes' or cmd == 'meta' or cmd == 'classifymeta' or cmd == 'sbatch' or cmd == 'makegraphs':
	argparser.add_argument(	'-skip',		dest='skip',	metavar='N',				type=int,	required=False,	default=0,	help='Skip the first N read pairs in files (default 0).')
	argparser.add_argument(	'-stop',		dest='stop',	metavar='N',				type=int,	required=False,	default=0,	help='Stop after N read pairs, set to 0 to disable (default 0).')

    if cmd == 'sortreads' or cmd == 'clusterbarcodes' or cmd == 'meta':
	argparser.add_argument(	'-random',		dest='n',	metavar='N',				type=int,	required=False,	default=0,	help='Use a random subset of N read pairs, this option is slower (default 0 = off). Can not be used in combination with "-skip" or "-stop"')
        argparser.add_argument(	'-mrc',			dest='mrc',	metavar='N',				type=int,	required=False,	default=1,	help='Minimum number of reads per cluster to consider it (default 1) DISABLED')

    if cmd == 'makegraphs':
	argparser.add_argument(	'-step',		dest='step',	metavar='N',				type=int,	required=False,	default=0,	help='Update intervall. Updates y value every "step" x value (default "max(x)/200" ie 200 datapoints along x-axis)')
	argparser.add_argument(	'-x',			dest='xscale',	metavar='N-N',				type=str,	required=False,	default='0-1000',help='x axis scale (default 0-1000)')
	argparser.add_argument(	'-y',			dest='yscale',	metavar='N-N',				type=str,	required=False,	default='0-1000',help='y axis scale (default 0-1000)')
	argparser.add_argument(	'-sample',		dest='sample',	metavar='str',				type=str,	required=False,	default='Sample',help='Sample name to put in header and filename')
	argparser.add_argument('--highres',	dest='highres', 	action='store_true', 			required=False,	default=False,	help='Use all x points to get high res data.')
	#argparser.add_argument(	'-g',			dest='graphs',	metavar='N',				type=str,	required=False,	default='a',	help='"all" or str with graph signs (default a).\n\n'+
	#			'Available graph signs:\n\n'+
	#			'a --> x  = "Minimum number of read pairs per cluster"\n'+
	#			'      y1-5  = "Number of barcode cluster" for Total, 16S, ITS, BOTH and None clusters\n'+
	#			'      y6-10 = "Percentage monoclonality"  for 16S, ITS and BOTH clusters\n'+
	#			'      Makes one graph for "good pairs" and one for "total read pairs" per cluster.\n\n'+
	#			'b --> x  = "Minimum number of read pairs per cluster"\n'+
	#			'      y1 = "Number of barcode cluster with consensus sequences of TYPE, total readpairs"\n'+
	#			'      y2 = "Percentage barcode clusters monoclonal for TYPE, total readpairs"\n'+
	#			'      y3 = "Number of barcode cluster with consensus sequences of TYPE, good readpairs"\n'+
	#			'      y4 = "Percentage barcode clusters monoclonal for TYPE, good readpairs"\n'+
	#			'      Makes one graph each for TYPE = ITS, 16S and BOTH.\n\n'+
	#			'c --> x  = "Minimum number of read pairs per cluster"\n'+
	#			'      y1-2 = "Number of barcode cluster" for Total and (16S, ITS or BOTH) clusters\n'+
	#			'      y3   = "Percentage monoclonality" percentage of clusters where there are only one version (/sequence) of the defined amplicon(s)\n'+
	#			'      Makes one graph for "good pairs" and one for "total read pairs" per cluster.\n\n'
	#		       )

    import sys
    indata = argparser.parse_args(sys.argv[1:])
    if indata.path[-1] == '/': indata.path=indata.path[:-1]
    if cmd =='clone' and indata.clonePath[-1] == '/': indata.clonePath=indata.clonePath[:-1]

    from socket import gethostname;
    import commands
    if gethostname().split('.')[1] == 'uppmax':
	indata.tempFileFolder = commands.getoutput('echo $SNIC_TMP')
        import os
        try: os.mkdir(indata.tempFileFolder+'/SEAseqtemp')
        except: pass
    else:
	indata.tempFileFolder = indata.path
        import os
        try: os.mkdir(indata.tempFileFolder+'/SEAseqtemp')
        except: pass

    return indata

#####
#check if run or imported // call main() or not
#####
if __name__ == "__main__":
    main()
#END of script
