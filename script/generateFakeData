#! /bin/env python

import sys
try:
    numberOfPairs = int(sys.argv[1])
    errorRate = float(sys.argv[2])
    filenameAndpath = sys.argv[3]
except IndexError:
    print 'USAGE: generateFakeData <numberOfPairs> <errorRate> <outFileBase>';sys.exit()
import random
readsPerBead = 500
numberOfBeads = int(numberOfPairs/readsPerBead)
readlength = 150

f1 = open(sys.argv[3]+'.1.fq','w')
f2 = open(sys.argv[3]+'.2.fq','w')

amplicons = {
    #'v2.16s.1':{'fwd':'ADNCTCCTACGGGAGGCAGCAG',       'rev':'GGACTACCAGGGTATCTAABCCTGT','r1':'GAGGAATATTGGTCAATGGGCGAGAGCCTGAACCAGCCAAGTAGCGTGCAGGATGACGGCCCTATGGGTTGTAAACTGCTTTTATAAGGGAAT','r2':'CGATACCCGCACTTTCGAGCTTCAGCGTCAGTTGCGCTCCAGTGAGCTGCCTTCGCAATCGGAGTTCTTCGTGATATCTAAGCATTTCACCGCTACACCACGAATTCCGCCCACTTTGTGCGTAC'},
    #'v2.16s.2':{'fwd':'AANKRAATTGACGGGGRCCCGCACA',    'rev':'GAYTTGACGTCRTCCCCDCCTTCCT','r1':'GCGGAGGAACATGTGGTTTAATTCGATGATACGCGAGGAACCTTACCCGGGCTTGAATTGCAGAGGAAGGATTTGGAGACAATGACGCCC','r2':'ACACCTTACGGTGGCAGTGTCCCCAGAGTGCCCAGCTTAACCTGATGGCAACTAAGGAGAGGGGTTGCGCTCGTTATGGCACTTAAGCCGACACCTCACGGCACGAGCTGACGACAACCATGCAG'},
    #'v2.23s.1':{'fwd':'AGNACCGTGAGGGAADGGYGAAAAG',    'rev':'AGTGAGCTRTTACGCWHTCTTT',   'r1':'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA','r2':'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'},
    #'v2.23s.2':{'fwd':'ACNRTCCTAAGGTAGCGAAATTCCTTGTC','rev':'GAGCCGACATCGAGGTGCCAA',    'r1':'GGTAAGTTCCGACCTGCACGAATGGTGTAATGATCCGGACGCTGTCTCAACCATGAGCTCAGTGAAATTGTAGTATCGGTGAAGAT','r2':'CCACCCCGTCGATATGAGCTCTTGGGGGGGATCAGCCTGTTATCCCCGGAGTACCTTTTATCCTTTGAGCGACGGAGTTTCCATACACATCCGCCGGATCACTATGCCCCAGTTTCCTGCCTGCTCGGC'},
    #'v2.its':{  'fwd':'GANGYYGGADTCGCTAGTAA',         'rev':'GNTACTDAGATGTTTCAGTTC',    'r1':'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC','r2':'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'}
    'v2.16s.1':{'fwd':'ADACTCCTACGGGAGGCAGCAG',       'rev':'GGACTACCAGGGTATCTAABCCTGT','r1':'GAGGAATATTGGTCAATGGGCGAGAGCCTGAACCAGCCAAGTAGCGTGCAGGATGACGGCCCTATGGGTTGTAAACTGCTTTTATAAGGGAAT','r2':'CGATACCCGCACTTTCGAGCTTCAGCGTCAGTTGCGCTCCAGTGAGCTGCCTTCGCAATCGGAGTTCTTCGTGATATCTAAGCATTTCACCGCTACACCACGAATTCCGCCCACTTTGTGCGTAC'},
    'v2.16s.2':{'fwd':'AAAKRAATTGACGGGGRCCCGCACA',    'rev':'GAYTTGACGTCRTCCCCDCCTTCCT','r1':'GCGGAGGAACATGTGGTTTAATTCGATGATACGCGAGGAACCTTACCCGGGCTTGAATTGCAGAGGAAGGATTTGGAGACAATGACGCCC','r2':'ACACCTTACGGTGGCAGTGTCCCCAGAGTGCCCAGCTTAACCTGATGGCAACTAAGGAGAGGGGTTGCGCTCGTTATGGCACTTAAGCCGACACCTCACGGCACGAGCTGACGACAACCATGCAG'},
#    'v2.23s.1':{'fwd':'AGTACCGTGAGGGAADGGYGAAAAG',    'rev':'AGTGAGCTRTTACGCWHTCTTT',   'r1':'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA','r2':'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'},
    'v2.23s.2':{'fwd':'ACBRTCCTAAGGTAGCGAAATTCCTTGTC','rev':'GAGCCGACATCGAGGTGCCAA',    'r1':'GGTAAGTTCCGACCTGCACGAATGGTGTAATGATCCGGACGCTGTCTCAACCATGAGCTCAGTGAAATTGTAGTATCGGTGAAGAT','r2':'CCACCCCGTCGATATGAGCTCTTGGGGGGGATCAGCCTGTTATCCCCGGAGTACCTTTTATCCTTTGAGCGACGGAGTTTCCATACACATCCGCCGGATCACTATGCCCCAGTTTCCTGCCTGCTCGGC'},
#    'v2.its'  :{'fwd':'GAAGYYGGADTCGCTAGTAA',         'rev':'GNTACTDAGATGTTTCAGTTC',    'r1':'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC','r2':'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'}
#    '16s1':{'rev':'GGACTACCAGGGTATCTAABCCTGT','fwd':'ADACTCCTACGGGAGGCAGCAG','r1':'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT','r2':'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT'},
#    '16s2':{'rev':'GAYTTGACGTCRTCCCCDCCTTCCT','fwd':'AAAKRAATTGACGGGGRCCCGCACA','r1':'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC','r2':'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'},
#    '23s1':{'rev':'AGTGAGCTRTTACGCWHTCTTT','fwd':'AGTACCGTGAGGGAADGGYGAAAAG','r1':'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG','r2':'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG'},
#    '23s2':{'rev':'GAGCCGACATCGAGGTGCCAA','fwd':'ACBRTCCTAAGGTAGCGAAATTCCTTGTC','r1':'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA','r2':'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'}
#    'v2.16s.1':{'fwd':'AGACTCCTACGGGAGGCAGCAG',       'rev':'GGACTACCAGGGTATCTAACCCTGT','r1':'GAGGAATATTGGTCAATGGGCGAGAGCCTGAACCAGCCAAGTAGCGTGCAGGATGACGGCCCTATGGGTTGTAAACTGCTTTTATAAGGGAAT','r2':'CGATACCCGCACTTTCGAGCTTCAGCGTCAGTTGCGCTCCAGTGAGCTGCCTTCGCAATCGGAGTTCTTCGTGATATCTAAGCATTTCACCGCTACACCACGAATTCCGCCCACTTTGTGCGTAC'},
#    'v2.16s.2':{'fwd':'AAATGAATTGACGGGGGCCCGCACA',    'rev':'GACTTGACGTCGTCCCCGCCTTCCT','r1':'GCGGAGGAACATGTGGTTTAATTCGATGATACGCGAGGAACCTTACCCGGGCTTGAATTGCAGAGGAAGGATTTGGAGACAATGACGCCC','r2':'ACACCTTACGGTGGCAGTGTCCCCAGAGTGCCCAGCTTAACCTGATGGCAACTAAGGAGAGGGGTTGCGCTCGTTATGGCACTTAAGCCGACACCTCACGGCACGAGCTGACGACAACCATGCAG'},
#    'v2.23s.2':{'fwd':'ACAGTCCTAAGGTAGCGAAATTCCTTGTC','rev':'GAGCCGACATCGAGGTGCCAA',    'r1':'GGTAAGTTCCGACCTGCACGAATGGTGTAATGATCCGGACGCTGTCTCAACCATGAGCTCAGTGAAATTGTAGTATCGGTGAAGAT','r2':'CCACCCCGTCGATATGAGCTCTTGGGGGGGATCAGCCTGTTATCCCCGGAGTACCTTTTATCCTTTGAGCGACGGAGTTTCCATACACATCCGCCGGATCACTATGCCCCAGTTTCCTGCCTGCTCGGC'}
}

def UIPAC2DNASTRING(string):
    import random
    return string.replace('R',random.choice('AG')).replace('Y',random.choice('CT')).replace('S',random.choice('GC')).replace('W',random.choice('AT')).replace('K',random.choice('GT')).replace('M',random.choice('AC')).replace('B',random.choice('CGT')).replace('D',random.choice('AGT')).replace('H',random.choice('ACT')).replace('V',random.choice('ACG')).replace('N',random.choice('AGCT'))

print 'Setting error rate:'
if errorRate < 1:
    oneIn = 1
    while errorRate-int(errorRate) != 0:
        errorRate = errorRate*10
        print errorRate,int(errorRate),errorRate-int(errorRate)
        oneIn = oneIn*10
    print errorRate, 'errors in',oneIn,'bases'
elif errorRate > 1: print 'Warning: error rate 1 or more.'
else: print 'Warning: error rate 1 or more.'

total_bases = 0
total_errors = 0
for i1 in xrange(numberOfBeads):
    
    beadId = ''
    for iX in xrange(15):
        base = random.choice(['A','G','T','C'])
        beadId += base
    handleseq = '-CSEQUENCE-'
    handleseq = 'CTAAGTCCATCCGCACTCCT'

    for i2 in xrange(readsPerBead):
        amplicon = random.choice(amplicons.keys())
        
        header = '@HWI.'+''.join([str(random.randint(0,9)) for i3 in range(5)]) +'.'+''.join([str(random.randint(0,9)) for i4 in range(5)])+'.'+amplicon+'.'+str(i1)
        readone = beadId + handleseq + amplicons[amplicon]['fwd'] + amplicons[amplicon]['r1'][:readlength-len(handleseq)-len(beadId)-len(amplicons[amplicon]['fwd'])]
        readtwo = amplicons[amplicon]['rev'] + amplicons[amplicon]['r2'][:readlength-len(amplicons[amplicon]['rev'])]
        
        readone = UIPAC2DNASTRING(readone)
        readtwo = UIPAC2DNASTRING(readtwo)
        
        tmp = ''
        for i5 in readone:
            total_bases += 1
            base = i5
            if errorRate and random.randint(1,oneIn) <= errorRate:
                total_errors += 1
                base = random.choice(['A','G','T','C'])
                while base == i5: base = random.choice(['A','G','T','C'])
            tmp += base
        readone = tmp
        
        tmp = ''
        for i6 in readtwo:
            base = i6
            if errorRate and random.randint(1,oneIn) <= errorRate:
                base = random.choice(['A','G','T','C'])
                while base == i6: base = random.choice(['A','G','T','C'])
            tmp += base
        readtwo = tmp

        f1.write( header +'\n')
        f1.write(  readone +'\n')
        f1.write(  '+' +'\n')
        f1.write(  ''.join(['#' for i in xrange(len(readone))]) +'\n')
        f2.write(  header +'\n')
        f2.write( readtwo +'\n')
        f2.write( '+' +'\n')
        f2.write( ''.join(['#' for i in xrange(len(readtwo))]) +'\n')


f1.close()
f2.close()
print numberOfBeads,'beads with',readsPerBead,'reads per bead generated.'
print total_bases,'bases', total_errors, 'errors, ie',float(total_errors)/total_bases,'errors per base in average.'